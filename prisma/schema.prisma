generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        String                @id @default(uuid())
  name      String
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  domain    String?               @unique
  plan      PlanType              @default(STARTER)
  settings  Json?
  slug      String                @unique
  bookings  Booking[]
  features  OrganizationFeature[]
  rooms     Room[]
  sites     Site[]
  users     User[]
}

model User {
  id                 String               @id @default(uuid())
  email              String               @unique
  name               String?
  role               Role                 @default(VIEWER)
  orgId              String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  mustChangePassword Boolean              @default(false)
  password           String?
  passwordChangedAt  DateTime?
  resetToken         String?
  resetTokenExpiry   DateTime?
  department         String?
  location           String?
  notes              String?
  phone              String?
  status             String               @default("active")
  createdBookings    Booking[]
  bookings           BookingParticipant[]
  checkins           Checkin[]
  favorites          Favorite[]
  messages           Message[]
  notifications      Notification[]
  org                Organization         @relation(fields: [orgId], references: [id])
}

model Site {
  id    String       @id @default(uuid())
  orgId String
  name  String
  rooms Room[]
  org   Organization @relation(fields: [orgId], references: [id])
}

model Feature {
  id            String                @id @default(uuid())
  name          String                @unique
  icon          String?
  description   String?
  howToUse      String?
  createdAt     DateTime              @default(now())
  isActive      Boolean               @default(true)
  updatedAt     DateTime              @default(now()) @updatedAt
  organizations OrganizationFeature[]
  rooms         RoomFeature[]
}

model OrganizationFeature {
  organizationId String
  featureId      String
  isEnabled      Boolean      @default(true)
  settings       Json?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  feature        Feature      @relation(fields: [featureId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@id([organizationId, featureId])
}

model Room {
  id          String        @id @default(uuid())
  orgId       String
  siteId      String
  name        String
  slug        String        @unique
  capacity    Int
  location    String?
  floor       Int?
  description String?
  isActive    Boolean       @default(true)
  bookings    Booking[]
  favorites   Favorite[]
  org         Organization  @relation(fields: [orgId], references: [id])
  site        Site          @relation(fields: [siteId], references: [id])
  features    RoomFeature[]
}

model RoomFeature {
  roomId    String
  featureId String
  feature   Feature @relation(fields: [featureId], references: [id])
  room      Room    @relation(fields: [roomId], references: [id])

  @@id([roomId, featureId])
}

model Booking {
  id             String               @id @default(uuid())
  orgId          String
  roomId         String
  title          String
  description    String?
  start          DateTime
  end            DateTime
  privacy        Privacy              @default(ORG)
  status         BookingStatus        @default(PENDING)
  recurrenceRule String?
  createdById    String
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  createdBy      User                 @relation(fields: [createdById], references: [id])
  org            Organization         @relation(fields: [orgId], references: [id])
  room           Room                 @relation(fields: [roomId], references: [id])
  participants   BookingParticipant[]
  checkins       Checkin[]
  messages       Message[]

  @@index([roomId, start, end])
}

model BookingParticipant {
  bookingId String
  userId    String
  role      ParticipantRole @default(REQUIRED)
  booking   Booking         @relation(fields: [bookingId], references: [id])
  user      User            @relation(fields: [userId], references: [id])

  @@id([bookingId, userId])
}

model Message {
  id        String   @id @default(uuid())
  bookingId String
  senderId  String
  content   String
  createdAt DateTime @default(now())
  booking   Booking  @relation(fields: [bookingId], references: [id])
  sender    User     @relation(fields: [senderId], references: [id])
}

model Favorite {
  userId String
  roomId String
  room   Room   @relation(fields: [roomId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([userId, roomId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  body      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Checkin {
  id           String    @id @default(uuid())
  bookingId    String
  userId       String
  checkedInAt  DateTime?
  checkedOutAt DateTime?
  booking      Booking   @relation(fields: [bookingId], references: [id])
  user         User      @relation(fields: [userId], references: [id])

  @@unique([bookingId, userId], name: "bookingId_userId")
}

model ReportCache {
  id        String   @id @default(uuid())
  orgId     String
  type      String
  period    String
  data      Json
  createdAt DateTime @default(now())
}

model AuditLog {
  id        String   @id @default(uuid())
  orgId     String
  userId    String
  action    String
  entity    String
  entityId  String
  metadata  Json?
  createdAt DateTime @default(now())
}

enum Role {
  ROI
  ADMIN
  MANAGER
  EMPLOYEE
  VIEWER
}

enum PlanType {
  STARTER
  PROFESSIONAL
  ENTERPRISE
  CUSTOM
}

enum ParticipantRole {
  HOST
  REQUIRED
  OPTIONAL
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REJECTED
  EXPIRED
}

enum Privacy {
  PUBLIC
  ORG
  INVITEES
}
